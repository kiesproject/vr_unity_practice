制作者：根津有咲

採点者：伊藤雄河

****************************************************************************************************************

得点は、採点者の裁量でつけられています。基準などはあまり無いので参考程度にしてください。
ここに書いてあるアドバイス等は、採点者の趣向も含まれているのでそれが正解というわけではありません。

・可読性(5点)　		…　プログラムの書き方・コメントを付けているか・インデントは正しくなされているか。他の人から見て読みやすいかなど
・UI(5点)				…　UIを有効に使っているかなど
・迷路(10点)			…　質の高い迷路を生成出来ているかを見る。袋小路が出来たり、目的にふさわしい迷路が出来るのかを見る。
・技術点(10点)			…　ちょっと難しい技術を使っていたり、アルゴリズムを有効に使っているか、オブジェクト指向など
・オリジナリティ(5点)	…　ミニゲームとして作るときオリジナリティがあるか、または良いアイデアであるか
・完成度(5点)			…　完成しているのか、またどれくらい出来ているのか(ミニゲームとして遊べるまでを完成とする)
・努力(10点)			…　プログラムやアピールポイントなどを見て「頑張ったんだなぁ」と感じれるか
合計50点

****************************************************************************************************************

〇あなたの得点
	・可読性　		3点	/5点
	・UI				0点	/5点
	・最適化			3点	/10点
	・技術点			6点	/10点
	・オリジナリティ	4点	/5点
	・完成度			1点	/5点
	・努力			11点	/10点
	・合計			28点


〇プレイした感想
	棒倒しはそこそこ簡単そうだから完成させてみてくださいね。
	
〇script面
	実際にオブジェクトを配置しながら進めているようですが、まずデータ上で迷路を作った後にオブジェクトを配置した方がやりやすいですね。
	特にこの場合Rayは扱いにくいと思います。データ上で迷路を作れば、座標をずらせば壁かどうか確認出来るので高速ですし遥かにやりやすいと思います。
	
	一応ざっくり読んでみましたが、生成する迷路のサイズは処理を行う途中変わることは無いので変数にした方がいいと思います。
	例えば、mazeSizeX, mazeSizeZみたいな感じで…
	ある程度最初から拡張性を意識して書けるとプログラミング力アップにつながると思います。
	
	あと、直接値を書きこむハードコーディングは避けた方が読みやすく調整しやすいプログラムになります。
	例えば、Vector3型でもnew Vector3(-4.25f, -0.25f, 3.75f)といきなり言われても何の値なのか分からないです。
	それよりも、何処から値を取ってきた方が読みやすくなると読んでて思いました。
	先の例ならnew Vector3(firstPoss.x - 0.5f,firstPoss.y ,firstPoss.z + maseSizeZ + 0.5f)みたいに書いた方が、それがどういう値なのか一目瞭然でしょう？(例の値は適当)
	
	あと、壁伸ばし法もちょっと見たけれど、外壁を作るときにWalls.transform.localScale.z分開けていたのでその間隔で統一した方がいいと思います。
	偶数座標ならWalls.transform.localScale.z*2で取得すればスッキリすると思います。見てる感じ値は直接値を入れてる感じだったので…
	
	根津さんがListを満足に使えるようになったと考えると涙なしでは読めませんでした。リズムゲームの制作を通して上達したみたいですね。グッジョブ！！！！！！
	
	
〇アドバイス
	上は思いつくことを書き連ねたので、よく見ると同じ事を言っています…
	まとめると、ハードコーディングを減らしましょう。
	
	
